Parse Tree : ['for', ['i', '=', '0'], ['i', '<', '6'], ['i', '+', 1], ['for', ['j', '=', '0'], ['j', '<', '6'], ['j', '+', 1], [[['g', [[[['2', '*', 'i'], '+', ['3', '*', 'j']], '+', '1'], [[['2', '*', 'i'], '+', ['3', '*', 'j']], '+', '1']]], '=', ['c', '3']], [[['c', '4'], '=', ['b', ['3', '*', ['i', ['-2', '*', ['j', '-2']]]]]], [[['b', [[['2', '*', 'i'], '+', 'j'], '+', '3']], '=', ['c', '5']], [['c', '6'], '=', ['g', [[['i', '+', ['4', '*', 'j']], '+', '4'], [['i', '+', ['4', '*', 'j']], '+', '4']]]]]]]]]


Loop Information : [['i', 0, 6], ['j', 0, 6]]


LDEs : {'b': [{'i': 2, 'j': 1, 'con': 3}, {'i': 3, 'j': -2, 'con': -2}, [2, 1]], 'g': [{'i': 2, 'j': 3, 'con': 1}, {'i': 1, 'j': 4, 'con': 0}, [0, 3], {'i': 2, 'j': 3, 'con': 1}, {'i': 1, 'j': 4, 'con': 0}, [0, 3]]}


Solutions for b: [[['b'], [0, 1], [2, 0]], [['b'], [0, 0], [3, 2]], [['b'], [0, 2], [3, 1]], [['b'], [0, 4], [3, 0]], [['b'], [0, 1], [4, 3]], [['b'], [0, 3], [4, 2]], [['b'], [0, 5], [4, 1]], [['b'], [0, 0], [5, 5]], [['b'], [0, 2], [5, 4]], [['b'], [0, 4], [5, 3]], [['b'], [1, 0], [3, 1]], [['b'], [1, 2], [3, 0]], [['b'], [1, 1], [4, 2]], [['b'], [1, 3], [4, 1]], [['b'], [1, 5], [4, 0]], [['b'], [1, 0], [5, 4]], [['b'], [1, 2], [5, 3]], [['b'], [1, 4], [5, 2]], [['b'], [2, 0], [3, 0]], [['b'], [2, 1], [4, 1]], [['b'], [2, 3], [4, 0]], [['b'], [2, 0], [5, 3]], [['b'], [2, 2], [5, 2]], [['b'], [2, 4], [5, 1]], [['b'], [3, 1], [4, 0]], [['b'], [3, 0], [5, 2]], [['b'], [3, 2], [5, 1]], [['b'], [3, 4], [5, 0]], [['b'], [4, 0], [5, 1]], [['b'], [4, 2], [5, 0]], [['b'], [5, 0], [5, 0]]]


Dependant Components BitVector : 
0x020000000000400000000000000400000000
0x200000000000000000004000000000000004
0x002000200000000000040000000000000040
0x000020002000200000400000000000000400
0x000200020000000000000000004000000000
0x000002000200020000000000040000000000
0x000000000002000200020000400000000000
0x000000000020002000200000000000004000
0x000000000000000020002000200000040000
0x000000000000000000000020002000600000


Solutions forg: [[['g'], [0, 1], [0, 1]], [['g'], [0, 5], [0, 4]], [['g'], [0, 0], [1, 0]], [['g'], [0, 4], [1, 3]], [['g'], [0, 3], [2, 2]], [['g'], [0, 2], [3, 1]], [['g'], [0, 1], [4, 0]], [['g'], [0, 5], [4, 3]], [['g'], [0, 4], [5, 2]], [['g'], [1, 3], [0, 3]], [['g'], [1, 2], [1, 2]], [['g'], [1, 1], [2, 1]], [['g'], [1, 5], [2, 4]], [['g'], [1, 0], [3, 0]], [['g'], [1, 4], [3, 3]], [['g'], [1, 3], [4, 2]], [['g'], [1, 2], [5, 1]], [['g'], [2, 1], [0, 2]], [['g'], [2, 5], [0, 5]], [['g'], [2, 0], [1, 1]], [['g'], [2, 4], [1, 4]], [['g'], [2, 3], [2, 3]], [['g'], [2, 2], [3, 2]], [['g'], [2, 1], [4, 1]], [['g'], [2, 5], [4, 4]], [['g'], [2, 0], [5, 0]], [['g'], [2, 4], [5, 3]], [['g'], [3, 3], [0, 4]], [['g'], [3, 2], [1, 3]], [['g'], [3, 1], [2, 2]], [['g'], [3, 5], [2, 5]], [['g'], [3, 0], [3, 1]], [['g'], [3, 4], [3, 4]], [['g'], [3, 3], [4, 3]], [['g'], [3, 2], [5, 2]], [['g'], [4, 1], [0, 3]], [['g'], [4, 0], [1, 2]], [['g'], [4, 4], [1, 5]], [['g'], [4, 3], [2, 4]], [['g'], [4, 2], [3, 3]], [['g'], [4, 1], [4, 2]], [['g'], [4, 5], [4, 5]], [['g'], [4, 0], [5, 1]], [['g'], [4, 4], [5, 4]], [['g'], [5, 3], [0, 5]], [['g'], [5, 2], [1, 4]], [['g'], [5, 1], [2, 3]], [['g'], [5, 0], [3, 2]], [['g'], [5, 4], [3, 5]], [['g'], [5, 3], [4, 4]], [['g'], [5, 2], [5, 3]]]


Solutions forg: [[['g'], [0, 1], [0, 1]], [['g'], [0, 5], [0, 4]], [['g'], [0, 0], [1, 0]], [['g'], [0, 4], [1, 3]], [['g'], [0, 3], [2, 2]], [['g'], [0, 2], [3, 1]], [['g'], [0, 1], [4, 0]], [['g'], [0, 5], [4, 3]], [['g'], [0, 4], [5, 2]], [['g'], [1, 3], [0, 3]], [['g'], [1, 2], [1, 2]], [['g'], [1, 1], [2, 1]], [['g'], [1, 5], [2, 4]], [['g'], [1, 0], [3, 0]], [['g'], [1, 4], [3, 3]], [['g'], [1, 3], [4, 2]], [['g'], [1, 2], [5, 1]], [['g'], [2, 1], [0, 2]], [['g'], [2, 5], [0, 5]], [['g'], [2, 0], [1, 1]], [['g'], [2, 4], [1, 4]], [['g'], [2, 3], [2, 3]], [['g'], [2, 2], [3, 2]], [['g'], [2, 1], [4, 1]], [['g'], [2, 5], [4, 4]], [['g'], [2, 0], [5, 0]], [['g'], [2, 4], [5, 3]], [['g'], [3, 3], [0, 4]], [['g'], [3, 2], [1, 3]], [['g'], [3, 1], [2, 2]], [['g'], [3, 5], [2, 5]], [['g'], [3, 0], [3, 1]], [['g'], [3, 4], [3, 4]], [['g'], [3, 3], [4, 3]], [['g'], [3, 2], [5, 2]], [['g'], [4, 1], [0, 3]], [['g'], [4, 0], [1, 2]], [['g'], [4, 4], [1, 5]], [['g'], [4, 3], [2, 4]], [['g'], [4, 2], [3, 3]], [['g'], [4, 1], [4, 2]], [['g'], [4, 5], [4, 5]], [['g'], [4, 0], [5, 1]], [['g'], [4, 4], [5, 4]], [['g'], [5, 3], [0, 5]], [['g'], [5, 2], [1, 4]], [['g'], [5, 1], [2, 3]], [['g'], [5, 0], [3, 2]], [['g'], [5, 4], [3, 5]], [['g'], [5, 3], [4, 4]], [['g'], [5, 2], [5, 3]]]


Dependant Components BitVector : 
0x020000000000400000000000000400000000
0x200000000000000000004000000000000004
0x002000200000000000040000000000000040
0x000020002000200000400000000000000400
0x000200020000000000000000004000000000
0x000002000200020000000000040000000000
0x000000000002000200020000400000000000
0x000000000020002000200000000000004000
0x000000000000000020002000200000040000
0x000000000000000000000020002000600000
0x090000000000000000000000100000000000
0x000018000000000000000800000100000000
0x800000100000000000000000000000000000
0x000080000100000000008000000000001000
0x000800000000001000080000000000000000
0x008000000000000000810000000000000000
0x000100000800000000000000081000000000
0x000000009000000000000000800000010000
0x000000080000010000000000000000000000
0x000000000008000010000000000800000000
0x000000800000000000100000000000000000
0x000000000080000000000100008000000000
0x001000000000080000000000010000000000
0x000001000000000008000000000010000800
0x000000010000800000000000000000100000
0x000000000010000080000000000000008100
0x000000000000000900000000000000080000
0x000000000000008000001000000000800000
0x000000000000000001000008000000000000
0x000000000000000000000090000000000000
0x000000000001000000000000000080000010
0x000000000000000000000000000009000000
0x000000000000000000000001000000000080


Final Statewise Partition ---------------------------------------------------------
[([0, 1], 2), ([0, 12], 1), ([1, 3], 1)]
[([0, 0], 2), ([0, 20], 1), ([1, 11], 1)]
[([0, 2], 2), ([0, 6], 2), ([0, 19], 1), ([1, 10], 1)]
[([0, 4], 2), ([0, 8], 2), ([0, 12], 2), ([0, 18], 1), ([1, 9], 1)]
[([0, 3], 2), ([0, 7], 2), ([1, 2], 1)]
[([0, 5], 2), ([0, 9], 2), ([0, 13], 2), ([1, 1], 1)]
[([0, 11], 2), ([0, 15], 2), ([0, 19], 2), ([1, 0], 1)]
[([0, 10], 2), ([0, 14], 2), ([0, 18], 2), ([1, 8], 1)]
[([0, 16], 2), ([0, 20], 2), ([1, 0], 2), ([1, 7], 1)]
[([0, 22], 2), ([1, 2], 2), ([1, 6], 1), ([1, 6], 2)]
[([0, 1], 0), ([0, 1], 3), ([1, 0], 3)]
[([0, 4], 3), ([0, 5], 0), ([0, 21], 0), ([1, 3], 3)]
[([0, 0], 0), ([0, 6], 3)]
[([0, 4], 0), ([0, 9], 3), ([0, 20], 0), ([1, 8], 3)]
[([0, 3], 0), ([0, 14], 3), ([0, 19], 0)]
[([0, 2], 0), ([0, 18], 0), ([0, 19], 3)]
[([0, 3], 3), ([0, 9], 0), ([1, 1], 0), ([1, 2], 3)]
[([0, 8], 0), ([0, 8], 3), ([1, 0], 0), ([1, 7], 3)]
[([0, 7], 0), ([0, 13], 3)]
[([0, 11], 0), ([0, 16], 3), ([1, 3], 0)]
[([0, 6], 0), ([0, 18], 3)]
[([0, 10], 0), ([0, 21], 3), ([1, 2], 0)]
[([0, 2], 3), ([0, 13], 0), ([1, 1], 3)]
[([0, 5], 3), ([0, 17], 0), ([1, 4], 3), ([1, 9], 0)]
[([0, 7], 3), ([0, 12], 0), ([1, 6], 3)]
[([0, 10], 3), ([0, 16], 0), ([1, 8], 0), ([1, 9], 3)]
[([0, 15], 0), ([0, 15], 3), ([1, 7], 0)]
[([0, 14], 0), ([0, 20], 3), ([1, 6], 0)]
[([0, 17], 3), ([0, 23], 0)]
[([0, 22], 0), ([0, 22], 3)]
[([0, 11], 3), ([1, 4], 0), ([1, 10], 3)]
[([1, 5], 0), ([1, 5], 3)]
[([0, 23], 3), ([1, 10], 0)]
[([0, 0], 1)]
[([0, 0], 3)]
[([0, 1], 1)]
[([0, 2], 1)]
[([0, 3], 1)]
[([0, 4], 1)]
[([0, 5], 1)]
[([0, 6], 1)]
[([0, 7], 1)]
[([0, 8], 1)]
[([0, 9], 1)]
[([0, 10], 1)]
[([0, 11], 1)]
[([0, 12], 3)]
[([0, 13], 1)]
[([0, 14], 1)]
[([0, 15], 1)]
[([0, 16], 1)]
[([0, 17], 1)]
[([0, 17], 2)]
[([0, 21], 1)]
[([0, 21], 2)]
[([0, 22], 1)]
[([0, 23], 1)]
[([0, 23], 2)]
[([1, 1], 2)]
[([1, 3], 2)]
[([1, 4], 1)]
[([1, 4], 2)]
[([1, 5], 1)]
[([1, 5], 2)]
[([1, 7], 2)]
[([1, 8], 2)]
[([1, 9], 2)]
[([1, 10], 2)]
[([1, 11], 0)]
[([1, 11], 2)]
[([1, 11], 3)]


Final Scheduled Partition ---------------------------------------------------------
[([0, 4], 2), ([0, 8], 2), ([0, 12], 2), ([0, 18], 1), ([1, 9], 1), ([0, 11], 2), ([0, 15], 2), ([0, 19], 2), ([1, 0], 1), ([0, 16], 2), ([0, 20], 2), ([1, 0], 2), ([1, 7], 1), ([0, 4], 3), ([0, 5], 0), ([0, 21], 0), ([1, 3], 3), ([0, 3], 3), ([0, 9], 0), ([1, 1], 0), ([1, 2], 3), ([0, 5], 3), ([0, 17], 0), ([1, 4], 3), ([1, 9], 0), ([0, 1], 2), ([0, 12], 1), ([1, 3], 1), ([0, 0], 2), ([0, 20], 1), ([1, 11], 1), ([0, 3], 0), ([0, 14], 3), ([0, 19], 0), ([0, 2], 0), ([0, 18], 0), ([0, 19], 3), ([0, 2], 3), ([0, 13], 0), ([1, 1], 3), ([0, 7], 3), ([0, 12], 0), ([1, 6], 3), ([0, 11], 3), ([1, 4], 0), ([1, 10], 3), ([0, 0], 0), ([0, 6], 3), ([0, 17], 3), ([0, 23], 0), ([0, 22], 0), ([0, 22], 3), ([0, 0], 1), ([0, 0], 3), ([0, 1], 1), ([0, 4], 1), ([0, 5], 1), ([0, 8], 1), ([0, 9], 1), ([0, 12], 3), ([0, 13], 1), ([0, 16], 1), ([0, 17], 1), ([0, 21], 2), ([0, 22], 1), ([1, 1], 2), ([1, 3], 2), ([1, 5], 1), ([1, 5], 2), ([1, 9], 2), ([1, 10], 2), ([1, 11], 3)]
[([0, 2], 2), ([0, 6], 2), ([0, 19], 1), ([1, 10], 1), ([0, 5], 2), ([0, 9], 2), ([0, 13], 2), ([1, 1], 1), ([0, 10], 2), ([0, 14], 2), ([0, 18], 2), ([1, 8], 1), ([0, 22], 2), ([1, 2], 2), ([1, 6], 1), ([1, 6], 2), ([0, 4], 0), ([0, 9], 3), ([0, 20], 0), ([1, 8], 3), ([0, 8], 0), ([0, 8], 3), ([1, 0], 0), ([1, 7], 3), ([0, 10], 3), ([0, 16], 0), ([1, 8], 0), ([1, 9], 3), ([0, 3], 2), ([0, 7], 2), ([1, 2], 1), ([0, 1], 0), ([0, 1], 3), ([1, 0], 3), ([0, 11], 0), ([0, 16], 3), ([1, 3], 0), ([0, 10], 0), ([0, 21], 3), ([1, 2], 0), ([0, 15], 0), ([0, 15], 3), ([1, 7], 0), ([0, 14], 0), ([0, 20], 3), ([1, 6], 0), ([0, 7], 0), ([0, 13], 3), ([0, 6], 0), ([0, 18], 3), ([1, 5], 0), ([1, 5], 3), ([0, 23], 3), ([1, 10], 0), ([0, 2], 1), ([0, 3], 1), ([0, 6], 1), ([0, 7], 1), ([0, 10], 1), ([0, 11], 1), ([0, 14], 1), ([0, 15], 1), ([0, 17], 2), ([0, 21], 1), ([0, 23], 1), ([0, 23], 2), ([1, 4], 1), ([1, 4], 2), ([1, 7], 2), ([1, 8], 2), ([1, 11], 0), ([1, 11], 2)]
--------------------------------------------------------------------
Number of threads are given user. Cores :  2
Partitions has been balanced into 2 threads.
Size of longest components : 72
Generating Parallel Code -------------------------------------------------------------------------------------------------------
OpenMP code has been written to output.c .
Use "g++ -openmp <filename>" to compile OpenMP code.
